// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// OutlierDetectionApplyConfiguration represents a declarative configuration of the OutlierDetection type for use
// with apply.
type OutlierDetectionApplyConfiguration struct {
	Consecutive5xx     *uint32      `json:"consecutive5xx,omitempty"`
	Interval           *v1.Duration `json:"interval,omitempty"`
	BaseEjectionTime   *v1.Duration `json:"baseEjectionTime,omitempty"`
	MaxEjectionPercent *uint32      `json:"maxEjectionPercent,omitempty"`
}

// OutlierDetectionApplyConfiguration constructs a declarative configuration of the OutlierDetection type for use with
// apply.
func OutlierDetection() *OutlierDetectionApplyConfiguration {
	return &OutlierDetectionApplyConfiguration{}
}

// WithConsecutive5xx sets the Consecutive5xx field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Consecutive5xx field is set to the value of the last call.
func (b *OutlierDetectionApplyConfiguration) WithConsecutive5xx(value uint32) *OutlierDetectionApplyConfiguration {
	b.Consecutive5xx = &value
	return b
}

// WithInterval sets the Interval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interval field is set to the value of the last call.
func (b *OutlierDetectionApplyConfiguration) WithInterval(value v1.Duration) *OutlierDetectionApplyConfiguration {
	b.Interval = &value
	return b
}

// WithBaseEjectionTime sets the BaseEjectionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BaseEjectionTime field is set to the value of the last call.
func (b *OutlierDetectionApplyConfiguration) WithBaseEjectionTime(value v1.Duration) *OutlierDetectionApplyConfiguration {
	b.BaseEjectionTime = &value
	return b
}

// WithMaxEjectionPercent sets the MaxEjectionPercent field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxEjectionPercent field is set to the value of the last call.
func (b *OutlierDetectionApplyConfiguration) WithMaxEjectionPercent(value uint32) *OutlierDetectionApplyConfiguration {
	b.MaxEjectionPercent = &value
	return b
}
