// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CookieApplyConfiguration represents a declarative configuration of the Cookie type for use
// with apply.
type CookieApplyConfiguration struct {
	Name     *string      `json:"name,omitempty"`
	Path     *string      `json:"path,omitempty"`
	TTL      *v1.Duration `json:"ttl,omitempty"`
	Secure   *bool        `json:"secure,omitempty"`
	HttpOnly *bool        `json:"httpOnly,omitempty"`
	SameSite *string      `json:"sameSite,omitempty"`
}

// CookieApplyConfiguration constructs a declarative configuration of the Cookie type for use with
// apply.
func Cookie() *CookieApplyConfiguration {
	return &CookieApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithName(value string) *CookieApplyConfiguration {
	b.Name = &value
	return b
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithPath(value string) *CookieApplyConfiguration {
	b.Path = &value
	return b
}

// WithTTL sets the TTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TTL field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithTTL(value v1.Duration) *CookieApplyConfiguration {
	b.TTL = &value
	return b
}

// WithSecure sets the Secure field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Secure field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithSecure(value bool) *CookieApplyConfiguration {
	b.Secure = &value
	return b
}

// WithHttpOnly sets the HttpOnly field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HttpOnly field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithHttpOnly(value bool) *CookieApplyConfiguration {
	b.HttpOnly = &value
	return b
}

// WithSameSite sets the SameSite field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SameSite field is set to the value of the last call.
func (b *CookieApplyConfiguration) WithSameSite(value string) *CookieApplyConfiguration {
	b.SameSite = &value
	return b
}
